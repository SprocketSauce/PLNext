<basic_progam> ::= "PROGRAM" <declaration_unit> <implementation_unit> "TERMINATE"

<declaration_unit> ::= "DECL" "::" <ident> ["CONST" <constant_declaration>] ["VAR" <variable_declaration>] [type_declaration] [procedure_interface] [function_interface] "DECLARATION" "END"

<procedure_interface> ::= "PROC" <ident> [<formal_parameters>]

<function_interface> ::= "FUNC" <ident> [<formal_parameters>]

<type_declaration> ::= "TYPE" <ident> "=>" <type> ";"

<formal_parameters> ::= "(" <ident> {<ident> ";"} ")"

<constant_declaration> ::= <ident> "IS" <number> {"," <ident> "IS" <number>} ";"

<variable_declaration> ::= <ident> ":" <ident> {"," <ident> ":", <ident>} ";"

<type> ::= <basic_type> | <array_type>

<basic_type> ::= <ident> | <enumerated_type> | <range_type>

<enumerated_type> ::= "{" <ident> {"," <ident>} "}"

<range_type> ::= "[" <range> "]"

<array_type> ::= "ARR" <ident> "[" <range> "]" "OF" <type>

<range> ::= <number> "TO" <number>

<implementation_unit> ::= "IMPL" "::" <ident> <block> "."

<block> ::= <specification_part> <implementation_part>

<specification_part> ::= [("CONST" <constant_declaration>) | ("VAR" <variable_declaration>) | <procedure_declaration> | <function_declaration>]

<procedure_declaration> ::= "PROC" <ident> ";" <block> ";"

<function_declaration> ::= "FUNC" <ident> ";" <block> ";"

<implementation_part> ::= <statement>

<statement> ::= <assignment> | <procedure_call> | <if_statement> | <while_statement> | <do_statement> | <for_statement> | <compound_statement>

<assignment> ::= <ident> "SET" <expression>

<procedure_call> ::= "EXECUTE" <ident>

<if_statement> ::= "IF" <expression> "THEN" <statement> "FI"

<while_statement> ::= "WHILE" <expression> "DO" <statement> {";" <statement>} "ELIHW"

<do_statement> ::= "DO" <statement> {";" <statement>} "WHILE" <expression> "OD"

<for_statement> ::= "FOR" <ident> ":=" <expression> "DO" <statement> {";" <statement>} "ROF"

<compound_statement> ::= "START" <statement> {";" <statement>} "STOP"

<expression> ::= <term> {("+"|"-") <term>}

<term> ::= <id_num> {("*"|"/") <id_num>}

<id_num> ::= <ident> | <number>

<number> ::= (0...9)+

<ident> ::= (a...z)+
